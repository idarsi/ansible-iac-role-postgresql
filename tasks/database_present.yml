---
###############################################################################
#
# database_present.yml
#
# @author Arsi Atomi
#
###############################################################################

###############################################################################
# SETTING VARIABLES
###############################################################################

- name: "Setting what variables are configured"
  ansible.builtin.set_fact:
    pg_database: "{{ pg_database_record.name }}"
    pg_access: "{{ pg_database_record.access | default([]) }}"
    pg_extensions: "{{ pg_database_record.extensions | default([]) }}"
  when: pg_database_record is defined

- name: "Checking if required variables are defined"
  ansible.builtin.assert:
    that:
      - pg_extensions is defined
      - pg_database is defined
      - pg_instance is defined
      - pg_port is defined
      - pg_version is defined
    fail_msg: "All tests did not pass"

###############################################################################
# ENSURING DATABASE ARE PRESENT
###############################################################################

- name: "Setting variables"
  ansible.builtin.set_fact:
    pg_cli_command: "/usr/pgsql-{{ pg_version }}/bin/psql postgres -p {{ pg_port }} -tXAc \"SELECT 1 FROM pg_database WHERE datname='{{ pg_database }}'\""

- name: "Checking if database already exists"
  become: true
  become_user: "{{ pg_os_user }}"
  ansible.builtin.command: "{{ pg_cli_command }}"
  register: database_exists
  changed_when: false
  failed_when: database_exists.rc != 0

- name: "Preparing CREATE DATABASE command if database does not exist"
  block:
    - name: "Setting optional attributes for CREATE DATABASE"
      ansible.builtin.set_fact:
        pg_database_owner_str: >-
          {{ 'OWNER {{ pg_database_record.owner }}' if (pg_database_record.owner is defined) else '' }}
        pg_database_encoding_str: >-
          {{ 'ENCODING {{ pg_database_record.encoding }}' if (pg_database_record.encoding is defined) else '' }}
    - name: "Assembling full CREATE DATABASE psql command"
      ansible.builtin.set_fact:
        pg_cli_command: >-
          /usr/pgsql-{{ pg_version }}/bin/psql postgres -p {{ pg_port }} -c "CREATE DATABASE \"{{ pg_database }}\" {{ pg_database_owner_str }} {{ pg_database_encoding_str }}"
  when: database_exists.stdout != '1'

- name: "Preparing ALTER DATABASE command if database does not exist"
  block:
    - name: "Setting optional attributes for ALTER DATABASE"
      ansible.builtin.set_fact:
        pg_database_owner_str: >-
          {{ 'OWNER TO {{ pg_database_record.owner }}' if (pg_database_record.owner is defined) else '' }}
    - name: "Assembling full ALTER DATABASE psql command"
      ansible.builtin.set_fact:
        pg_cli_command: >-
          /usr/pgsql-{{ pg_version }}/bin/psql postgres -p {{ pg_port }} -c "ALTER DATABASE \"{{ pg_database }}\" {{ pg_database_owner_str }}"
  when: database_exists.stdout == '1'

- name: "Ensuring database is present with correct parameters"
  become: true
  become_user: "{{ pg_os_user }}"
  ansible.builtin.command: "{{ pg_cli_command }}"
  register: my_output
  changed_when: my_output.rc == 0
  failed_when: my_output.rc != 0

- name: "Writing log"
  ansible.builtin.include_tasks: log_write.yml
  vars:
    pg_log_write: "Created database {{ pg_version }}/{{ pg_instance }}/{{ pg_database }}"

###############################################################################
# ENSURING ACCESS TO DATABASE
###############################################################################

- name: "Ensure pg_hba.conf access rules are present"
  ansible.builtin.lineinfile:
    path: "{{ pg_bind_dir }}/{{ pg_version }}/{{ pg_instance }}/pg_hba.conf"
    line: "{{ item.type | default('host') }} {{ pg_database_record.name }} {{ item.name }} {{ item.address }} {{ item.method | default('scram-sha-256') }} {{ item.options | default('') }}"
    state: present
    create: no
    insertafter: EOF
    owner: "{{ pg_os_user }}"
    group: "{{ pg_os_group }}"
    mode: "0600"
  loop: "{{ pg_access }}"
  when: pg_access is defined

###############################################################################
# LOOPING THROUGH EXTENSIONS
###############################################################################

- name: "Looping through extensions"
  ansible.builtin.include_tasks: "extension_present.yml"
  loop: "{{ pg_extensions }}"
  loop_control:
    loop_var: pg_extension_record
